import os
import torch
import cv2
import numpy as np
from ultralytics import YOLO

yaml_path = r"yaml file path"
test_images_dir = r"Test set file path"

predictions_output_dir = r"Test set result save path"
os.makedirs(predictions_output_dir, exist_ok=True)
predictions_file_path = os.path.join(predictions_output_dir, "predictions.txt")

model = YOLO(r"runs/detect/train14/weights/best.pt")

def predict_and_save(test_images_dir, predictions_file_path):
    with open(predictions_file_path, 'w') as predictions_file:
        for img_name in os.listdir(test_images_dir):
            if img_name.lower().endswith(('.png', '.jpg', '.jpeg')):
                img_path = os.path.join(test_images_dir, img_name)
                results = model.predict(img_path, imgsz=640, conf=0.01)

                for result in results:
                    boxes = result.boxes
                    for box in boxes:
                        cls = int(box.cls)
                        conf = float(box.conf[0])
                        x_center = float(box.xyxyn[0][0])
                        y_center = float(box.xyxyn[0][1])
                        width = float(box.xyxyn[0][2] - box.xyxyn[0][0])
                        height = float(box.xyxyn[0][3] - box.xyxyn[0][1])

                        img_name_without_ext = os.path.splitext(img_name)[0]

                        predictions_file.write(f"{img_name_without_ext} {cls} {x_center:.6f} {y_center:.6f} {width:.6f} {height:.6f} {conf:.6f}\n")

predict_and_save(test_images_dir, predictions_file_path)
